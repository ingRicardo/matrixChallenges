start = 10000
A=start
start++

array1 => 0 1 2 3 4 5 6 7 8 9 

array2 => 1 0 0 0 0 

if array1[i] == 0 && j == 0 && array2[j] == 1
starts from 1
arry2[i] = array1[i]


if array1[i] != 0 && j != 0 && array2[j] != 1
    arry2[j] = array1[i]

loop array1 to 9
    array1[0]

10000
11000
12000
13000
14000 

A =13456
Bi=33516
Ci= 2
Di= 2
===========
https://www.codesdope.com/blog/article/generating-permutations-of-all-elements-of-an-arra/ 

start = 10,000
end = 99,999
A =? find number   13456
A size = 5
permutation of 5 elements
each element needs to be from 0-9
0,   1,  2,  3,  4 
1-9,0-9,0-9,0-9,0-9
Bi= 33516
Ci=2   match with each other
Di=2   match independent of the place
A =13456
Bi=33516

sol1
R=
step 1: break Bi into individual digits and save it on an int array
    int bi = 33516;
    in bitmp = bi;
    int size =5;
    int number = new int[bitmp];
    int i=0;
    while (bitmp != 0)
    {
        cout << bitmp%10 << " ";
        bitmp /= 10;
        number[i] = bitmp;
        i+=1;
    }

step 2: 
    brute force 
    for i =1 to 9
        for j= 0 to 9
            for k = 0 to 9
                for l =0 to 9
                    for m =0 to 9
                        array [0] = i 
                        array [1] = j
                        array [2] = k
                        array [3] = l 
                        array [4] = m 
            10000
            10009
            10099
            10999
            19999
            99999
            

    bi = 33516;
    loop from 10,000 to 99,999
        10000  10001  10002  10003 ... 10009    
loop j-5
   loop i-9   
        if (number[j] == i)
    0123456789
  0    x            
  1    x      
  2      x     
  3  x          
  4       x        

 B 33516
 A 13456
    x  x 


int main() 
{ 
    int n = 5; 
    int *array = new int[n];
    findStrictlyIncreasingNum(100000-1, array, n); 
    return 0; 
} 

void findStrictlyIncreasingNum(int start, int *array , int n) 
{ 
    // If number becomes N-digit, print it 
    if (n == 10000) 
    { 
        //cout << array << " "; 
        return; 
    } 
  
    // start from (prev digit + 1) till 9 
    for (int i = start; i <= 9; i++) 
    { 
        // append current digit to number 
      //  string str = out + to_string(i); 
        array[n] = i;
        // recurse for next digit 
        findStrictlyIncreasingNum(i + 1, array, n - 1); 
    } 
} 




https://ideone.com/L8Nlzd
https://socratic.org/questions/how-many-5-digit-numbers-can-be-formed-using-0-9-1


https://www.geeksforgeeks.org/print-all-n-digit-strictly-increasing-numbers/
https://www.codesdope.com/blog/article/generating-permutations-of-all-elements-of-an-arra/
